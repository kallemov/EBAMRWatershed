#ifdef CH_LANG_CC
/*
 *      _______              __
 *     / ___/ /  ___  __ _  / /  ___
 *    / /__/ _ \/ _ \/  V \/ _ \/ _ \
 *    \___/_//_/\___/_/_/_/_.__/\___/
 *    Please refer to Copyright.txt, in Chombo's root directory.
 */
#endif

#ifndef _EBPETSCMAP_H_
#define _EBPETSCMAP_H_

#ifdef CH_USE_PETSC
#include <map>
#include "petsc.h"
#include "BCFunc.H"
#include "EBLevelGrid.H"
#include "LinearSolver.H"

#include "NamespaceHeader.H"

//! \class EBPetscMap is class that provides communication between petsc and chombo variables

class EBPetscMap 
{
public:
  
    /*!
     * \brief constructor class 
     *
     */
    EBPetscMap();
    
    /*!
     * \brief destructor
     *
     */ 
    virtual ~EBPetscMap();

    virtual void clean();
    
    /*!
     * \brief Define class 
     *
     */ 
    void defineGrids( const int a_finestLev, 
		      const Vector<const EBLevelGrid*> &a_eblg,
		      const Vector<int> &a_refratios, 
		      const bool a_includeIrregular = false,
		      const bool a_includeRegular   = true,
		      const bool a_includeCovered   = false);
    
    void defineGrids( const int a_finestLev, 
		      const Vector<EBLevelGrid> &a_eblg,
		      const Vector<int> &a_refratios,
		      const bool a_includeIrregular = false,
		      const bool a_includeRegular   = true,
		      const bool a_includeCovered   = false);
    /*!
     * \brief define model's variables for current grid
     *
     */
    virtual void defineParameters(const int a_startLevel, 
				  const int a_finestLevel,
				  const int a_numGhostCells) = 0;

    /*!
     * \brief initialize mapping between Chombo grid from/to petsc vectors  
     *
     */ 
    void resizeChomboPetscMapping(const bool a_includeIrregular = false,
				  const bool a_includeRegular   = true,
				  const bool a_includeCovered   = false);
    
    /*!
     * \brief generate local to global mapping for petsc vectors  
     *
     */ 
    void setChomboPetscGlobalMap(Vec& a_vec,
				 ISLocalToGlobalMapping& a_petsc_mapping,
				 const int a_numComp=1);
    
    /*!
     * \brief wraps EBCellFab data stored in all levels to petsc vector using mapping generated by updateChomboPetscMapping
     *  format is PetscIndex = MapIndex(vof) * number of components stored in EBCellFab
     */ 
    PetscErrorCode putChomboInPetsc(const Vector<LevelData<EBCellFAB>*>& /* a_ebfab */, Vec& /* xvec */ );

    PetscErrorCode putChomboInPetsc(const Vector<LevelData<BaseIVFAB<Real> >*>& a_ch, Vec& a_b);

    /*!
     * \brief returns EBCellFab data(all levels) from petsc vector using mapping generated by updateChomboPetscMapping
     *  format is PetscIndex = MapIndex(vof) * number of components stored in EBCellFab
     */ 
    PetscErrorCode putPetscInChombo(Vec /* xvec */ , Vector<LevelData<EBCellFAB>*>& /* a_ebfab */);

    PetscErrorCode putPetscInChombo(Vec a_x, Vector<LevelData<BaseIVFAB<Real> >*>& a_ch);
    /*!
     * \brief returns size of petsc vector for single component vector EBCellFab   
     *
     */ 
    PetscInt getPetscVecBaseSize(const int a_lev = -1) const;

    /*!
     * \brief setting start index in global petsc vector for Chombo/Petsc transformations 
     *        Must be set before any putChomboinPetsc and putPetscInChombo operations 
     *        if petsc vector consist of more then one solver data. Default value is 0.
     *
     */
    PetscErrorCode setOffsetIndex(const PetscInt a_idx) 
	{ 
	    m_PetscOffsetIdx = a_idx;
	    PetscFunctionReturn(0);
	}

    /*!
     * \brief returns start index in global petsc vector for Chombo/Petsc transformations 
     *
     */
    PetscInt getOffsetIndex() 
	{
	    return m_PetscOffsetIdx;
	}
    
    virtual PetscErrorCode getMatAIJSizes(PetscInt* a_d_nnz,
					  PetscInt* a_n_nnz,
					  const PetscInt a_nComp,
					  LinearOp<LevelData<EBCellFAB> >* a_op)
	{   PetscFunctionReturn(0); };


    // EB data need for 
//protected:

    //MPI communicator
    MPI_Comm m_petsc_comm;

    //grid information
    Vector<const EBLevelGrid*>         m_eblgsPtr;
    Vector<int>                  m_refRatios;

    //objects to provide mappings between Chombo and Petsc objects
    PetscInt m_PetscOffsetIdx;
    Vector<PetscInt>  m_PetscVecLocalSize;
    Vector<LevelData<BaseEBCellFAB<int64_t> >* > m_VofGlobalMap;
    
    //ISLocalToGlobalMapping m_petsc_mapping;
    Vector<LayoutData<VoFIterator >*>     m_vofIterator;

    //flag for grid data
    bool m_isDefined;
  
    //flag for remapping all maps
    bool m_needsRemapping;
    int m_finestLevel;// max level
  
    //flags for cell selection
    bool m_includeIrregular;
    bool m_includeRegular;
    bool m_includeCovered;

    int m_numGhostCells;
};

#include "NamespaceFooter.H"
#endif 
#endif /*_EBPETSCMAP_H_*/


