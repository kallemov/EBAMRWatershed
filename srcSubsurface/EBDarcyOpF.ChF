C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.


#include "CONSTANTS.H"
 
       subroutine darcyebcoregapplydomainflux(
     &    chf_fra1[phi],
     &    chf_const_fra1[faceflux],
     &     chf_const_fra1[bc],
     &     chf_const_real[dx],
     &     chf_const_int[side],
     &     chf_const_int[idir],
     &     chf_box[box])

        integer chf_ddecl[i;j;k], chf_ddecl[ioff;joff;koff]
        real_t scaledflux, tol
c       set a tolerance to account for an extremely small thermal conductivity.
c       specially for some test cases with a thermal conductivity set to zero

        tol = 1.0d-15
        chf_dterm[ioff = chf_id(0,idir);
        joff = chf_id(1,idir);
        koff = chf_id(2,idir)]


c     strangely the faceflux lives on the first interior cell not on the face.
c     so no whacky face-to-cell shifting here
c     also need to divide out variable coefficient bit because it gets multiplied back in later
c     bc has also been shifted
        chf_multido[box;i;j;k]

	  
        if (side.eq.1) then

           if (ABS(bc(chf_ix[i-ioff;j-joff;k-koff])) .GT. tol) then
              scaledflux = faceflux(chf_ix[i-ioff;j-joff;k-koff])/bc(chf_ix[i-ioff;j-joff;k-koff])
           else
              scaledflux = 0.0d0
           endif


           phi(chf_ix[i;j;k]) = phi(chf_ix[i-ioff;j-joff;k-koff]) + scaledflux*dx
        else
           if(ABS(bc(chf_ix[i+ioff;j+joff;k+koff])) .GT. tol) then
              scaledflux = faceflux(chf_ix[i+ioff;j+joff;k+koff])/bc(chf_ix[i+ioff;j+joff;k+koff])
           else
              scaledflux = 0.0d0
           endif


           phi(chf_ix[i;j;k]) = phi(chf_ix[i+ioff;j+joff;k+koff]) - scaledflux*dx

        endif

        chf_enddo

        return
        end

      subroutine darcyconductivityinplace(
     &     chf_fra1[opphidir],
     &     chf_fra1[darcyflux0],
     &     chf_fra1[darcyflux1],
     &     chf_fra1[darcyflux2],
     &     chf_const_fra1[phi],
     &     chf_const_fra1[b0],
     &     chf_const_fra1[b1],
     &     chf_const_fra1[b2],
     &     chf_const_real[beta],
     &     chf_const_realvect[dx],
     &     chf_box[box])

      integer chf_ddecl[i;j;k]
      real_t laplphi, dx0, dy0, dz0

      dx0 = -beta/dx(0)
      dy0 = -beta/dx(1)
      dz0 = -beta/dx(2)

      chf_multido[box;i;j;k]

      darcyflux0(chf_ix[i+1;j  ;k  ])  = b0(CHF_IX[i+1;j  ;k  ])*(phi(chf_ix[i+1;j  ;k  ]) - phi(chf_ix[i  ;j  ;k  ]))*dx0
      darcyflux0(chf_ix[i  ;j  ;k  ])  = b0(CHF_IX[i  ;j  ;k  ])*(phi(chf_ix[i  ;j  ;k  ]) - phi(chf_ix[i-1;j  ;k  ]))*dx0
      darcyflux1(chf_ix[i  ;j+1;k  ])  = b1(CHF_IX[i  ;j+1;k  ])*(phi(chf_ix[i  ;j+1;k  ]) - phi(chf_ix[i  ;j  ;k  ]))*dy0
      darcyflux1(chf_ix[i  ;j  ;k  ])  = b1(CHF_IX[i  ;j  ;k  ])*(phi(chf_ix[i  ;j  ;k  ]) - phi(chf_ix[i  ;j-1;k  ]))*dy0
      darcyflux2(chf_ix[i  ;j  ;k+1])  = b2(CHF_IX[i  ;j  ;k+1])*(phi(chf_ix[i  ;j  ;k+1]) - phi(chf_ix[i  ;j  ;k  ]))*dz0
      darcyflux2(chf_ix[i  ;j  ;k  ])  = b2(CHF_IX[i  ;j  ;k  ])*(phi(chf_ix[i  ;j  ;k  ]) - phi(chf_ix[i  ;j  ;k-1]))*dz0

      laplphi =  ( -darcyflux0(chf_ix[i+1;j  ;k  ]) + darcyflux0(chf_ix[i ;j  ;k  ]))/dx(0)
     &+          ( -darcyflux1(chf_ix[i  ;j+1;k  ]) + darcyflux1(chf_ix[i ;j  ;k  ]))/dx(1)  
     &+          ( -darcyflux2(chf_ix[i  ;j  ;k+1]) + darcyflux2(chf_ix[i ;j  ;k  ]))/dx(2)  

c     opphidir comes in holding alpha*phi
      opphidir(chf_ix[i;j;k]) = opphidir(chf_ix[i;j;k]) + laplphi

c      write(*,*) i,"-",j,"-",k,"   ", phi(chf_ix[i; j  ;k  ])
c     &,"  ",phi(chf_ix[i-1;j  ;k  ]),"  ",phi(chf_ix[i ;j-1;k]), "  ",phi(chf_ix[i;j  ;k-1  ])
c     &,"  ",phi(chf_ix[i+1;j  ;k  ]),"  ",phi(chf_ix[i;j+1  ;k  ]),"  ",phi(chf_ix[i;j  ;k+1  ])
     
      chf_enddo

      return
      end

      subroutine darcyincrapplyebco(
     $     chf_fra1[lhs],
     $     chf_const_fra1[interiorflux],
     $     chf_const_fra1[domainfluxlo],
     $     chf_const_fra1[domainfluxhi],
     $     chf_const_real[beta],
     $     chf_const_real[dx],
     $     chf_box[lobox],
     $     chf_box[hibox],
     $     chf_box[centerbox],
     $     chf_const_int[haslo],
     $     chf_const_int[hashi],
     $     chf_const_int[facedir])

      integer chf_ddecl[ii,i;jj,j;kk,k]


      chf_dterm[
      ii = chf_id(facedir, 0);
      jj = chf_id(facedir, 1);
      kk = chf_id(facedir, 2)]

      chf_multido[centerbox; i; j; k]

      lhs(chf_ix[i;j;k]) = lhs(chf_ix[i;j;k])
     $     +beta*
     $     (interiorflux(chf_ix[i+ii;j+jj;k+kk])
     $     -interiorflux(chf_ix[i   ;j   ;k   ]))/dx

      chf_enddo


      if(haslo .eq. 1) then
         chf_multido[lobox; i; j; k]

         lhs(chf_ix[i;j;k]) = lhs(chf_ix[i;j;k])
     $        + beta*
     $        (interiorflux(chf_ix[i+ii;j+jj;k+kk])
     $        -domainfluxlo(chf_ix[i   ;j   ;k   ]))/dx

         chf_enddo
      endif

      if(hashi .eq. 1) then
         chf_multido[hibox; i; j; k]

         lhs(chf_ix[i;j;k]) = lhs(chf_ix[i;j;k])
     $        + beta*
     $        (domainfluxhi(chf_ix[i+ii;j+jj;k+kk])
     $        -interiorflux(chf_ix[i   ;j   ;k   ]))/dx

         chf_enddo
      endif


      return
      end

      subroutine darcydecrinvrelcoefebco(
     &     chf_fra1[relcoef],
     &     chf_fra1[bcoef],
     &     chf_const_real[beta],
     &     chf_box[box],
     $     chf_real[dx],
     $     chf_int[idir])

      integer chf_ddecl[i;j;k]
      integer chf_ddecl[ii;jj;kk]

      chf_dterm[
      ii = chf_id(idir, 0);
      jj = chf_id(idir, 1);
      kk = chf_id(idir, 2)]

      chf_multido[box;i;j;k]

      relcoef(chf_ix[i;j;k]) = relcoef(chf_ix[i;j;k])
     $     - beta*(
     $     bcoef(chf_ix[i+ii;j+jj;k+kk]) +
     $     bcoef(chf_ix[i   ;j   ;k   ]))/(dx*dx)

      chf_enddo

      return
      end
ccccccccccccccccc
      subroutine darcyinvertlambdaebco(
     &     chf_fra1[lambda],
     $     chf_real[safety],
     &     chf_box[box])

      integer chf_ddecl[i;j;k]

      chf_multido[box;i;j;k]
         lambda(chf_ix[i;j;k]) = safety/(lambda(chf_ix[i;j;k]))
      chf_enddo

      return
      end

      subroutine darcygetfluxebco(
     &     chf_fra1[flux],
     $     chf_const_fra1[bcoef],
     &     chf_const_fra1[phi],
     &     chf_box[opphibox],
     $     chf_const_real[dx],
     $     chf_const_int[idir])

      integer chf_ddecl[i;j;k]
      integer chf_ddecl[ioff;joff;koff]

      real_t oneoverdx

      chf_dterm[
      ioff = chf_id(0,idir);
      joff = chf_id(1,idir);
      koff = chf_id(2,idir)]


      chf_multido[opphibox;i;j;k]

      oneoverdx = bcoef(chf_ix[i;j;k])/dx
      flux(chf_ix[i;j;k]) =
     $     oneoverdx*(
     $     phi(chf_ix[i     ;j     ;k     ]) -
     $     phi(chf_ix[i-ioff;j-joff;k-koff]) )


      chf_enddo

      return
      end

 
